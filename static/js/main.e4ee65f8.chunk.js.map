{"version":3,"sources":["component/Board.js","App.js","index.js"],"names":["Board","useState","randomBoard","setRandomBoard","swap","valIndex","zeroIndex","tempArray","useEffect","array","sort","Math","random","className","map","value","onClick","val","indexOf","console","log","moveSquare","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAqDeA,EAnDD,WACV,IAAMA,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACjE,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAUJ,SAASC,EAAKC,EAAUC,GACpB,IAAIC,EAAS,YAAOL,GACpBK,EAAUD,GAAaJ,EAAYG,GACnCE,EAAUF,GAAY,EACtBF,GAAe,8BAAUI,MAoBzB,OA5BJC,qBAAU,WACNL,GAAe,kBALEM,EAKUT,EAJpB,YAAIS,GAAOC,MAAK,kBAAMC,KAAKC,SAAW,MAD7C,IAAiBH,OAMnB,IA2BM,qBAAKI,UAAU,QAAf,SACCX,EAAYY,KAAI,SAACC,GAClB,OACE,qBAAiBF,UAAU,WAA3B,SACE,qBAAKA,UAAqB,IAAVE,EAAc,QAAU,OAAQC,QAAS,kBAtBnE,SAAoBC,GAClB,IAAIX,EAAYJ,EAAYgB,QAAQ,GAChCb,EAAWH,EAAYgB,QAAQD,GACnCE,QAAQC,IAAId,EAAWD,IAEnBA,EAAW,IAAMC,GAAaD,EAAW,IAAMC,GAI1CD,EAAW,IAAMC,GAAaA,EAAY,IAAM,GAI/CD,EAAW,IAAMC,IAAcA,EAAY,GAAK,IAAM,IAP9DF,EAAKC,EAAUC,GAgBsDe,CAAWN,IAA1E,SACCA,KAFOA,SC7BLO,MAVf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,cAAC,EAAD,SCDNU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4ee65f8.chunk.js","sourcesContent":["import {useState, useEffect } from \"react\";\r\n\r\nconst Board = () => {\r\n    const Board = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n    const [randomBoard, setRandomBoard] = useState([]);\r\n    ////////////////////////////////////////////////\r\n    function shuffle(array) {\r\n    return [...array].sort(() => Math.random() - 0.5);\r\n  }\r\n/////////////////////////////////////////////////\r\nuseEffect(()=>{\r\n    setRandomBoard(()=>shuffle(Board));\r\n},[]);\r\n///////////////////////////////////////////\r\nfunction swap(valIndex, zeroIndex) {\r\n    let tempArray = [...randomBoard];\r\n    tempArray[zeroIndex] = randomBoard[valIndex];\r\n    tempArray[valIndex] = 0;\r\n    setRandomBoard(() => [...tempArray]);\r\n  };\r\n  ///////////////////////////////////////////////\r\n  function moveSquare(val) {\r\n    let zeroIndex = randomBoard.indexOf(0);\r\n    let valIndex = randomBoard.indexOf(val);\r\n    console.log(zeroIndex, valIndex);\r\n    /////////// transform top && bottom/////////////////////\r\n    if (valIndex + 4 === zeroIndex || valIndex - 4 === zeroIndex) {\r\n      swap(valIndex, zeroIndex);\r\n    }\r\n    //////////////transform right///////////////////\r\n    else if (valIndex + 1 === zeroIndex && zeroIndex % 4 !== 0) {\r\n      swap(valIndex, zeroIndex);\r\n    }\r\n    ///////////////////transform left/////////////////////\r\n     else if (valIndex - 1 === zeroIndex && (zeroIndex + 1) % 4 !== 0) {\r\n      swap(valIndex, zeroIndex);\r\n    }\r\n  }\r\n    return ( \r\n        <div className=\"Board\">\r\n        {randomBoard.map((value) => {\r\n        return (\r\n          <div key={value} className=\"BoardSqr\">\r\n            <div className={value === 0 ? 'Empty' : 'tile'} onClick={() => moveSquare(value)}>\r\n            {value}\r\n        </div>\r\n          </div>\r\n        );\r\n      })}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Board;","import \"./App.css\";\nimport Board from \"./component/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Board/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}